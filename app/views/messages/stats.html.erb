<%
  colors     = ["#1ee8e8", "#ef86d0"]
  start_date = 10.years.ago
  start_date = DateTime.parse(params[:start_date]) if params[:start_date]
  end_date   = DateTime.now
  end_date   = DateTime.parse(params[:end_date]) if params[:end_date].present?
  period     = :month
  period     = params[:period].to_sym if params[:period].present?

  messages        = @conversation.messages.where(sent_at: start_date..end_date)
  participant_ids = messages.distinct(:participant_id).pluck(:participant_id)
  participants    = Participant.where(id: participant_ids).includes(:person)

  message_data = participants.map { |participant| [ participant.person, messages.where(participant_id: participant.id).not_photos] }
%>

<p>
  <%= link_to "Back to conversations", conversations_path %>
</p>

<%= form_tag(request.path, method: :get) do %>
  <%= label_tag(:period, "Granularity") %>
  <%= select_tag(:period, options_for_select([:hour, :day, :week, :month], period)) %>
  <%= label_tag(:start_date, "Start date") %>
  <%= text_field_tag(:start_date, start_date.to_date, placeholder: start_date.to_date) %>
  <%= label_tag(:end_date, "End date") %>
  <%= text_field_tag(:end_date, end_date.to_date, placeholder: end_date.to_date) %>
  <%= submit_tag("Refresh") %>
<% end %>

<h2>Overall stats</h2>

<p>Bewteen dates <%= start_date.to_date %> and <%= end_date.to_date %></p>

<table>
  <tr>
    <td>Total message count</td>
    <td><%= number_with_delimiter messages.count %></td>
  </tr>
  <tr>
    <td>Average message length</td>
    <td><%= messages.not_photos.average('length(content)') %></td>
  </tr>
  <tr>
    <td>Words sent</td>
    <td><%= number_with_delimiter messages.not_photos.sum("array_length(regexp_split_to_array(content, '\\s+'), 1)") %></td>
  </tr>
  <tr>
    <td>Photos sent</td>
    <td><%= number_with_delimiter messages.photos.count %></td>
  </tr>
</table>

<h2>
  Number of messages
</h2>
<%= line_chart message_data.map { |person, messages| { name: person.name, data: messages.group_by_period(period, :sent_at).count } }, colors: colors %>
<h2>
  Message averge length (characters)
</h2>
<%= line_chart message_data.map { |person, messages| { name: person.name, data: messages.group_by_period(period, :sent_at).average('length(content)') } }, colors: colors %>
<h2>
  Message total length (characters)
</h2>
<%= line_chart message_data.map { |person, messages| { name: person.name, data: messages.group_by_period(period, :sent_at).sum('length(content)') } }, colors: colors %>

<h2>"I love you"s</h2>
<%= line_chart message_data.map { |person, messages| { name: person.name, data: messages.where('content ilike ?', '%I love you%').group_by_period(period, :sent_at).count } }, colors: colors %>

<h2>"I miss you"s</h2>
<%= line_chart message_data.map { |person, messages| { name: person.name, data: messages.where('content ilike ? or content ilike ? or content ilike ?', '%I miss you%', "%miss u%", "%miss you%").group_by_period(period, :sent_at).count } }, colors: colors %>

<%
  words = messages.limit(200).pluck(:content).join(" ").split(/[^A-Za-z]/).reject(&:blank?).select{|word| word.length > 1 }.inject({}){ |hash, word| hash[word.downcase] ||= 1; hash[word.downcase] +=1; hash }
%>